import psycopg2
import csv

def connect_db():
    return psycopg2.connect(
        dbname="phonebook_db",
        user="postgres",
        password="22041983re", 
        host="localhost"
    )

def create_table():
    with connect_db() as conn, conn.cursor() as cur:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS phonebook (
                id SERIAL PRIMARY KEY,
                first_name VARCHAR(50) NOT NULL,
                phone VARCHAR(20) NOT NULL UNIQUE
            );
        """)
        conn.commit()

def create_csv_file():
    try:
        with open('phones.csv', 'x', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['first_name', 'phone'])
    except FileExistsError:
        pass

def insert_from_csv():
    with connect_db() as conn, conn.cursor() as cur:
        try:
            with open('phones.csv', 'r') as f:
                reader = csv.reader(f)
                next(reader)
                for row in reader:
                    cur.execute(
                        "INSERT INTO phonebook (first_name, phone) VALUES (%s, %s) ON CONFLICT (phone) DO NOTHING",
                        row
                    )
            conn.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ CSV –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª 'phones.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def insert_from_console():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    with connect_db() as conn, conn.cursor() as cur:
        cur.execute("CALL insert_or_update_user(%s, %s);", (name, phone))
        conn.commit()
        print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω!")

def bulk_insert():
    users = []
    while True:
        name = input("–ò–º—è (–∏–ª–∏ '0' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if name == "0": break
        phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
        users.append([name, phone])
    array_for_sql = [[str(i+1), u[0], u[1]] for i, u in enumerate(users)]
    with connect_db() as conn, conn.cursor() as cur:
        cur.execute("CALL bulk_insert_users(%s);", (array_for_sql,))
        conn.commit()
        print("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def update_data():
    user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞: ")
    new_name = input("–ù–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ")
    new_phone = input("–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ")
    with connect_db() as conn, conn.cursor() as cur:
        if new_name:
            cur.execute("UPDATE phonebook SET first_name = %s WHERE id = %s", (new_name, user_id))
        if new_phone:
            cur.execute("UPDATE phonebook SET phone = %s WHERE id = %s", (new_phone, user_id))
        conn.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

def delete_data():
    target = input("–£–¥–∞–ª–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ (1) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É (2)? ")
    with connect_db() as conn, conn.cursor() as cur:
        if target == "1":
            name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
            cur.execute("DELETE FROM phonebook WHERE first_name = %s", (name,))
        else:
            phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
            cur.execute("DELETE FROM phonebook WHERE phone = %s", (phone,))
        conn.commit()
        print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª—ë–Ω.")

def query_data():
    search = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    with connect_db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM phonebook WHERE first_name LIKE %s OR phone LIKE %s", (f"%{search}%", f"%{search}%"))
        results = cur.fetchall()
        for row in results:
            print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")
        if not results:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def show_all_contacts():
    with connect_db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM phonebook ORDER BY id")
        results = cur.fetchall()
        for row in results:
            print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")

def paginated_view():
    limit = int(input("–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤—ã–≤–æ–¥–∏—Ç—å? "))
    offset = int(input("–° –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞—Ç—å? "))
    with connect_db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM get_contacts_paginated(%s, %s)", (limit, offset))
        results = cur.fetchall()
        for row in results:
            print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")

def main():
    create_table()
    create_csv_file()
    while True:
        print("\n=== PhoneBook Manager ===")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∏–∑ CSV\n2. –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n3. –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞\n4. –û–±–Ω–æ–≤–∏—Ç—å\n5. –£–¥–∞–ª–∏—Ç—å\n6. –ü–æ–∏—Å–∫\n7. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ\n8. –ü–∞–≥–∏–Ω–∞—Ü–∏—è\n9. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        if choice == "1":
            insert_from_csv()
        elif choice == "2":
            insert_from_console()
        elif choice == "3":
            bulk_insert()
        elif choice == "4":
            update_data()
        elif choice == "5":
            delete_data()
        elif choice == "6":
            query_data()
        elif choice == "7":
            show_all_contacts()
        elif choice == "8":
            paginated_view()
        elif choice == "9":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

if __name__ == "__main__":
    main()
